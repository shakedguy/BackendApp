@page "/{Router}"
@using BackendApp.Shared.Models
@using BackendApp.Client.Components
@using BackendApp.Client.Components.Tables
@inject FunctionsHelperClass m_helper
@inject NavigationManager m_uriHelper
@inject HttpClient m_http
@inject GenericPageState m_GenericPageState
@inject IDialogService m_dialogService


@if (m_GenericPageState.Data == null)
{
    <MudProgressCircular class="position-relative start-50 mt-xl-5" Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <PageTitle>@m_GenericPageState.Title</PageTitle>

    <Table Data="m_GenericPageState.Data" />

    <MudButton Variant="Variant.Filled" Color="Color.Secondary"
           @onclick="OnAddButtonClick" StartIcon="@Icons.Outlined.AddBox"
           class="position-absolute end-0 m-lg-5">
        Add
    </MudButton>
}


@code {

    [Parameter]
    public string Router { get; set; } = string.Empty;

    public static List<string> SupportedRoutes = new() { "home", "messages", "divisions", "dispatches", "agents" };

    protected override async Task OnParametersSetAsync() => await this.callApi();

    protected override async Task OnAfterRenderAsync(bool firstRender) => await this.callApi();

    private async Task callApi()
    {
        try
        {
            switch (this.Router)
            {
                case "messages":
                    m_GenericPageState.Data = await m_http.GetFromJsonAsync<IEnumerable<MessageModel>>("api/Generic/message");
                    break;
                case "divisions":
                    m_GenericPageState.Data = await m_http.GetFromJsonAsync<IEnumerable<DivisionModel>>($"api/Generic/division");
                    break;
                case "agents":
                    m_GenericPageState.Data = await m_http.GetFromJsonAsync<IEnumerable<AgentModel>>("api/Generic/agent");
                    break;
                case "dispatches":
                    m_GenericPageState.Data = await m_http.GetFromJsonAsync<IEnumerable<DispatchModel>>("api/Generic/dispatch");
                    break;
                default:
                    m_helper.Error();
                    break;
            }
        }
        catch (Exception e)
        {
            m_helper.Error();
        }


    }



    private void OnAddButtonClick() => m_uriHelper.NavigateTo(m_uriHelper.Uri + "/create");


}