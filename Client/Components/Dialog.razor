@using BackendApp.Shared.Helpers
@using BackendApp.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using BackendApp.Client.Components.DialogForms
@using System.Net
@inject FunctionsHelperClass m_helper
@inject NavigationManager m_uriHelper
@inject HttpClient m_http
@inject GenericPageState m_genericPageState
@inject ISnackbar m_snackbar
@attribute [Authorize]

@if (Item == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudDialog>
        <DialogContent>
            @if (Item is MessageModel)
            {
                <MessageForm Message="@(Item as MessageModel)" IsEdit="@IsEdit" />
            }
            else if (Item is DispatchModel)
            {
                <DispatchForm Dispatch="@(Item as DispatchModel)" IsEdit="@IsEdit" />
            }
            else
            {
                <MudNumericField @bind-Value="Item.Id" ReadOnly="!IsEdit" HideSpinButtons="!IsEdit"
                         T="int" Immediate="true" InvertMouseWheel="true" InputMode="InputMode.numeric"
                         Label=@($"{m_genericPageState.DialogTitle} Number:") Variant="variant" Step="1"
                         For="() => Item.Id" IconSize="Size.Large" />
            }
        </DialogContent>
        <DialogActions>

            @if (IsEdit)
            {
                <MudButton OnClick="@onSubmit" Color="Color.Success">Confirm</MudButton>
                <MudButton Color="Color.Error" OnClick="@onUpdateCanceled">Cancel</MudButton>

            }
            else
            {
                <MudButton Color="Color.Error" OnClick="@onDeleteHandler">Delete</MudButton>
                <MudSpacer />
                <MudButton Color="Color.Tertiary" OnClick="@editMode">Edit</MudButton>
            }
            <MudButton OnClick="onClose">Close</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IModel? Item { get; set; } = null;

    private bool isCreate { get; set; } = false;

    private string Router { get; set; }

    [Parameter]
    public bool IsEdit { get; set; } = false;

    private MudBlazor.Variant variant = Variant.Text;

    protected override void OnParametersSet()
    {
        this.Router = m_helper.GetRoute();
        if (IsEdit)
        {
            isCreate = true;
            this.Item = m_genericPageState.SelectedItem;
            variant = Variant.Outlined;
        }
    }

    private async void onSubmit()
    {
        IsEdit = false;
        await callApi();
    }

    private async Task callApi()
    {
        HttpResponseMessage response = new HttpResponseMessage();

        if (Item is MessageModel)
            response = await m_http.PutAsJsonAsync("api/Generic", (this.Item as MessageModel));
        else if (Item is DivisionModel)
            response = await m_http.PutAsJsonAsync("api/Generic", (this.Item as DivisionModel));
        else if (Item is AgentModel)
            response = await m_http.PutAsJsonAsync($"genericApi/agents?id={this.Item!.Id}", (this.Item as DivisionModel));
        else if (Item is DispatchModel)
            response = await m_http.PutAsJsonAsync($"genericApi/dispatches?id={this.Item!.Id}", (this.Item as DivisionModel));
        else
            m_helper.Error();

        if (response.IsSuccessStatusCode)
            m_snackbar.Add($"{this.Item.ToString()} {this.Item.Id} successfully updated!", Severity.Success);
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
            m_snackbar.Add($"{this.Item.Id} is an unauthorized {m_genericPageState.DialogTitle.ToLower()} number", Severity.Error);
        else
            m_snackbar.Add($"This {m_genericPageState.DialogTitle.ToLower()} is not exist!", Severity.Error);


    }

    private void editMode() => this.MudDialog.Close(DialogResult.Ok("update"));

    private void onUpdateCanceled() => this.MudDialog.Close(DialogResult.Ok("canceled"));

    private void onClose() => MudDialog.Cancel();

    private async void onDeleteHandler()
    {
        var response = await m_http.DeleteAsync($"genericApi/{m_genericPageState.DialogTitle.ToLower()}/{this.Item.Id}");
        if (response.IsSuccessStatusCode)
            m_snackbar.Add($"{this.Item.ToString()} successfully deleted", Severity.Success);
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
            m_snackbar.Add($"{this.Item.Id} is an unauthorized {m_genericPageState.DialogTitle.ToLower()} number", Severity.Error);
        else
            m_snackbar.Add($"This {m_genericPageState.DialogTitle.ToLower()} is already exist!", Severity.Error);
    }



}